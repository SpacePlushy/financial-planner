name: Test GitHub App Setup

on:
  workflow_dispatch:

jobs:
  test-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check if APP_ID exists
        run: |
          if [ -z "${{ vars.APP_ID }}" ]; then
            echo "‚ùå APP_ID variable is not set"
            echo ""
            echo "To fix this:"
            echo "1. Go to Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Click on 'Variables' tab"
            echo "3. Click 'New repository variable'"
            echo "4. Name: APP_ID"
            echo "5. Value: Your GitHub App ID (found in GitHub App settings)"
            exit 1
          else
            echo "‚úÖ APP_ID is configured"
            echo "APP_ID is set (value hidden for security)"
          fi

      - name: Check if APP_PRIVATE_KEY exists
        run: |
          if [ -z "${{ secrets.APP_PRIVATE_KEY }}" ]; then
            echo "‚ùå APP_PRIVATE_KEY secret is not set"
            echo ""
            echo "To fix this:"
            echo "1. Go to Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "2. Stay on 'Secrets' tab"
            echo "3. Click 'New repository secret'"
            echo "4. Name: APP_PRIVATE_KEY"
            echo "5. Value: Your GitHub App private key (entire .pem file content)"
            exit 1
          else
            echo "‚úÖ APP_PRIVATE_KEY is configured"
          fi

      - name: Test Token Generation
        id: test-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
        continue-on-error: true

      - name: Check Token Generation Result
        if: steps.test-token.outcome == 'failure'
        run: |
          echo "‚ùå Failed to generate GitHub App token"
          echo ""
          echo "Common issues:"
          echo "1. Private key format is incorrect (must include header/footer)"
          echo "2. GitHub App is not installed on this repository"
          echo "3. App ID doesn't match the private key"
          echo "4. Private key has expired"
          exit 1

      - name: Verify Token Works
        if: steps.test-token.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.test-token.outputs.token }}
          script: |
            try {
              // Test basic API access
              const { data: rateLimit } = await github.rest.rateLimit.get();
              console.log('‚úÖ Token is valid and working!');
              console.log(`Rate limit remaining: ${rateLimit.rate.remaining}/${rateLimit.rate.limit}`);
              
              // Test repository access
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log(`‚úÖ Can access repository: ${repo.full_name}`);
              
              // Test permissions
              console.log('\nüìã Testing permissions:');
              
              // Test read access
              try {
                await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: 'README.md'
                });
                console.log('‚úÖ Read access: OK');
              } catch (e) {
                console.log('‚ùå Read access: FAILED');
              }
              
              // Display token metadata
              console.log('\nüîç Token Information:');
              console.log(`- Token ID: ${process.env.GITHUB_TOKEN?.substring(0, 10)}...`);
              console.log(`- Expires in: ~1 hour (default)`);
              console.log(`- Scope: Repository ${context.repo.owner}/${context.repo.repo}`);
              
            } catch (error) {
              console.error('‚ùå Token verification failed:', error.message);
              process.exit(1);
            }

      - name: Test Common Operations
        if: steps.test-token.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.test-token.outputs.token }}
          script: |
            console.log('üß™ Testing common GitHub App operations:\n');
            
            // Test 1: List issues
            try {
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 5
              });
              console.log(`‚úÖ Can list issues: Found ${issues.length} open issues`);
            } catch (e) {
              console.log('‚ùå Cannot list issues:', e.message);
            }
            
            // Test 2: List pull requests
            try {
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                per_page: 5
              });
              console.log(`‚úÖ Can list PRs: Found ${prs.length} open PRs`);
            } catch (e) {
              console.log('‚ùå Cannot list PRs:', e.message);
            }
            
            // Test 3: Get workflow runs
            try {
              const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 5
              });
              console.log(`‚úÖ Can access workflows: Found ${runs.total_count} workflow runs`);
            } catch (e) {
              console.log('‚ùå Cannot access workflows:', e.message);
            }

      - name: Summary Report
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const setupOk = ${{ steps.test-token.outcome == 'success' }};
            
            if (setupOk) {
              core.summary
                .addHeading('‚úÖ GitHub App Setup Complete', 2)
                .addRaw('Your GitHub App is properly configured and ready to use!')
                .addBreak()
                .addHeading('Next Steps', 3)
                .addList([
                  'Run the PR automation workflow to see it in action',
                  'Customize the workflows for your specific needs',
                  'Add more GitHub API operations as required'
                ])
                .write();
            } else {
              core.summary
                .addHeading('‚ùå GitHub App Setup Incomplete', 2)
                .addRaw('Please check the logs above for specific error messages.')
                .addBreak()
                .addHeading('Setup Checklist', 3)
                .addList([
                  'Create a GitHub App in your GitHub settings',
                  'Install the app on your repository',
                  'Add APP_ID as a repository variable',
                  'Add APP_PRIVATE_KEY as a repository secret',
                  'Ensure the private key includes header/footer lines'
                ])
                .write();
            }