name: Auto PR for Gemini Review

on:
  push:
    branches:
      - 'feature/**'
      - 'fix/**'
      - 'update/**'
    # Don't run on main to avoid infinite loops

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract branch info
        id: branch-info
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          # Extract PR title from branch name
          # feature/add-dark-mode -> Add dark mode
          PR_TITLE=$(echo "$BRANCH_NAME" | sed 's/^[^\/]*\///' | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')
          echo "pr-title=$PR_TITLE" >> $GITHUB_OUTPUT
      
      - name: Check if PR already exists
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.branch-info.outputs.branch }}';
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              console.log(`PR already exists: ${prs[0].html_url}`);
              return true;
            }
            return false;
      
      - name: Create Pull Request
        if: steps.check-pr.outputs.result == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.branch-info.outputs.branch }}';
            const title = '${{ steps.branch-info.outputs.pr-title }}';
            
            // Get commit messages for PR body
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: branch,
              per_page: 10
            });
            
            // Get the commits that are not in main
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main',
              head: branch
            });
            
            let commitMessages = comparison.commits
              .map(c => `- ${c.commit.message.split('\n')[0]}`)
              .join('\n');
            
            const body = `## Summary
            
This PR contains the following changes:

${commitMessages}

---
*This PR was automatically created to enable Gemini Code Assist review. The Gemini bot will review this code shortly.*

/gemini review`;
            
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                head: branch,
                base: 'main',
                draft: false
              });
              
              console.log(`Pull request created: ${pr.html_url}`);
              
              // Add labels
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['auto-pr', 'needs-review']
              });
              
            } catch (error) {
              console.error('Failed to create PR:', error.message);
              throw error;
            }